'npx hardhat clean' running (wd: /workspace/Supscriptchain)
'npx hardhat clean --global' running (wd: /workspace/Supscriptchain)
Problem deserializing hardhat configuration, using defaults: Expecting value: line 1 column 2 (char 1)
'npx hardhat compile --force' running (wd: /workspace/Supscriptchain)
INFO:Detectors:
BaseSubscription._processPayment(address,uint256) (contracts/BaseSubscription.sol#270-294) uses arbitrary from in transferFrom: token.safeTransferFrom(_user,plan.merchant,amountToPay) (contracts/BaseSubscription.sol#291)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom
INFO:Detectors:
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) has bitwise-xor operator ^ instead of the exponentiation operator **: 
	 - inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#116)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) has bitwise-xor operator ^ instead of the exponentiation operator **: 
	 - inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#116)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-exponentiation
INFO:Detectors:
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)
	- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#116)
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#120)
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#121)
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#122)
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#123)
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#124)
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#125)
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#104)
	- result = prod0 * inverse (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#131)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#116)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#120)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#121)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#122)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#124)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#125)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#104)
	- result = prod0 * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#131)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
ERC20Permit.constructor(string).name (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#44) shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#62-64) (function)
	- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#17) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
Ownable2Step.transferOwnership(address).newOwner (node_modules/@openzeppelin/contracts/access/Ownable2Step.sol#35) lacks a zero-check on :
		- _pendingOwner = newOwner (node_modules/@openzeppelin/contracts/access/Ownable2Step.sol#36)
Ownable2StepUpgradeable.transferOwnership(address).newOwner (node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol#42) lacks a zero-check on :
		- _pendingOwner = newOwner (node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol#43)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation
INFO:Detectors:
Reentrancy in BaseSubscription._processPayment(address,uint256) (contracts/BaseSubscription.sol#270-294):
	External calls:
	- token.safeTransferFrom(_user,plan.merchant,amountToPay) (contracts/BaseSubscription.sol#291)
	Event emitted after the call(s):
	- PaymentProcessed(_user,_planId,amountToPay,userSub.nextPaymentDate) (contracts/BaseSubscription.sol#293)
Reentrancy in BaseSubscription._subscribe(uint256,address) (contracts/BaseSubscription.sol#204-231):
	External calls:
	- token.safeTransferFrom(_subscriber,plan.merchant,amountToPay) (contracts/BaseSubscription.sol#228)
	Event emitted after the call(s):
	- Subscribed(_subscriber,_planId,nextPaymentDate) (contracts/BaseSubscription.sol#230)
Reentrancy in BaseSubscription._subscribeWithPermit(uint256,uint256,uint8,bytes32,bytes32,address) (contracts/BaseSubscription.sol#233-268):
	External calls:
	- permitToken.permit(_subscriber,address(this),amountToPay,_deadline,v,r,s) (contracts/BaseSubscription.sol#262)
	- token.safeTransferFrom(_subscriber,plan.merchant,amountToPay) (contracts/BaseSubscription.sol#265)
	Event emitted after the call(s):
	- Subscribed(_subscriber,_planId,nextPaymentDate) (contracts/BaseSubscription.sol#267)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#49-68) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp <= deadline,ERC20Permit: expired deadline) (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#58)
BaseSubscription._getPaymentAmount(uint256) (contracts/BaseSubscription.sol#156-191) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp - updatedAt < MAX_STALE_TIME,Price feed stale) (contracts/BaseSubscription.sol#172)
BaseSubscription._processPayment(address,uint256) (contracts/BaseSubscription.sol#270-294) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= userSub.nextPaymentDate,Payment not due yet) (contracts/BaseSubscription.sol#279)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
AddressUpgradeable._revert(bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#231-243) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#236-239)
StringsUpgradeable.toString(uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#19-39) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#25-27)
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#31-33)
MathUpgradeable.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#55-134) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#62-66)
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#85-92)
	- INLINE ASM (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#99-108)
Address._revert(bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#231-243) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#236-239)
ShortStrings.toString(ShortString) (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#63-73) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#68-71)
StorageSlot.getAddressSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#62-67) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#64-66)
StorageSlot.getBooleanSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#72-77) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#74-76)
StorageSlot.getBytes32Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#82-87) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#84-86)
StorageSlot.getUint256Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#92-97) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#94-96)
StorageSlot.getStringSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#102-107) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#104-106)
StorageSlot.getStringSlot(string) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#112-117) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#114-116)
StorageSlot.getBytesSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#122-127) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#124-126)
StorageSlot.getBytesSlot(bytes) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#132-137) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#134-136)
Strings.toString(uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#19-39) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#25-27)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#31-33)
ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#55-72) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#63-67)
ECDSA.toEthSignedMessageHash(bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#165-174) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#169-173)
ECDSA.toTypedDataHash(bytes32,bytes32) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#197-206) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#199-205)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#62-66)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#85-92)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#99-108)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
4 different versions of Solidity are used:
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable2Step.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/security/Pausable.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
		-^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#4)
		-^0.8.0 (contracts/BaseSubscription.sol#2)
		-^0.8.0 (contracts/MockToken.sol#2)
		-^0.8.0 (contracts/Subscription.sol#2)
		-^0.8.0 (contracts/SubscriptionUpgradeable.sol#2)
		-^0.8.0 (contracts/SubscriptionUpgradeableV2.sol#2)
		-^0.8.0 (contracts/interfaces/AggregatorV3Interface.sol#2)
		-^0.8.0 (contracts/mocks/MaliciousToken.sol#2)
		-^0.8.0 (contracts/mocks/MockV3Aggregator.sol#2)
		-^0.8.0 (contracts/mocks/PermitToken.sol#2)
	- Version constraint ^0.8.2 is used by:
		-^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)
	- Version constraint ^0.8.1 is used by:
		-^0.8.1 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#4)
		-^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- Version constraint ^0.8.8 is used by:
		-^0.8.8 (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#4)
		-^0.8.8 (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/Ownable2Step.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/Pausable.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#4)
	- ^0.8.0 (contracts/BaseSubscription.sol#2)
	- ^0.8.0 (contracts/MockToken.sol#2)
	- ^0.8.0 (contracts/Subscription.sol#2)
	- ^0.8.0 (contracts/SubscriptionUpgradeable.sol#2)
	- ^0.8.0 (contracts/SubscriptionUpgradeableV2.sol#2)
	- ^0.8.0 (contracts/interfaces/AggregatorV3Interface.sol#2)
	- ^0.8.0 (contracts/mocks/MaliciousToken.sol#2)
	- ^0.8.0 (contracts/mocks/MockV3Aggregator.sol#2)
	- ^0.8.0 (contracts/mocks/PermitToken.sol#2)
Version constraint ^0.8.2 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.2 (node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol#4)
Version constraint ^0.8.1 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.1 (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#4)
	- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
Version constraint ^0.8.8 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- UserDefinedValueTypesBug
	- SignedImmutables.
It is used by:
	- ^0.8.8 (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#4)
	- ^0.8.8 (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in SafeERC20Upgradeable._callOptionalReturnBool(IERC20Upgradeable,bytes) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#134-142):
	- (success,returndata) = address(token).call(data) (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol#139)
Low level call in AddressUpgradeable.sendValue(address,uint256) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#64-69):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#67)
Low level call in AddressUpgradeable.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#135)
Low level call in AddressUpgradeable.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#155-162):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#160)
Low level call in AddressUpgradeable.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol#185)
Low level call in SafeERC20._callOptionalReturnBool(IERC20,bytes) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#134-142):
	- (success,returndata) = address(token).call(data) (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#139)
Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#64-69):
	- (success,None) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#67)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#155-162):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#160)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#185)
Low level call in MaliciousToken.transferFrom(address,address,uint256) (contracts/mocks/MaliciousToken.sol#51-65):
	- (success,None) = target.call(data) (contracts/mocks/MaliciousToken.sol#61)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function AccessControlUpgradeable.__AccessControl_init() (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#76-77) is not in mixedCase
Function AccessControlUpgradeable.__AccessControl_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#79-80) is not in mixedCase
Variable AccessControlUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol#260) is not in mixedCase
Function Ownable2StepUpgradeable.__Ownable2Step_init() (node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol#25-27) is not in mixedCase
Function Ownable2StepUpgradeable.__Ownable2Step_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol#29-30) is not in mixedCase
Variable Ownable2StepUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol#70) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#29-31) is not in mixedCase
Function OwnableUpgradeable.__Ownable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#33-35) is not in mixedCase
Variable OwnableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol#94) is not in mixedCase
Function PausableUpgradeable.__Pausable_init() (node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol#34-36) is not in mixedCase
Function PausableUpgradeable.__Pausable_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol#38-40) is not in mixedCase
Variable PausableUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol#116) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init() (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#40-42) is not in mixedCase
Function ReentrancyGuardUpgradeable.__ReentrancyGuard_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#44-46) is not in mixedCase
Variable ReentrancyGuardUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol#88) is not in mixedCase
Function IERC20PermitUpgradeable.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol#89) is not in mixedCase
Function ContextUpgradeable.__Context_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#18-19) is not in mixedCase
Function ContextUpgradeable.__Context_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#21-22) is not in mixedCase
Variable ContextUpgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol#40) is not in mixedCase
Function ERC165Upgradeable.__ERC165_init() (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#24-25) is not in mixedCase
Function ERC165Upgradeable.__ERC165_init_unchained() (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#27-28) is not in mixedCase
Variable ERC165Upgradeable.__gap (node_modules/@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol#41) is not in mixedCase
Function ERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#81-83) is not in mixedCase
Variable ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#37) is not in mixedCase
Function IERC20Permit.DOMAIN_SEPARATOR() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#89) is not in mixedCase
Parameter BaseSubscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._merchantAddress (contracts/BaseSubscription.sol#313) is not in mixedCase
Parameter BaseSubscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._token (contracts/BaseSubscription.sol#314) is not in mixedCase
Parameter BaseSubscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._price (contracts/BaseSubscription.sol#315) is not in mixedCase
Parameter BaseSubscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._billingCycle (contracts/BaseSubscription.sol#316) is not in mixedCase
Parameter BaseSubscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._priceInUsd (contracts/BaseSubscription.sol#317) is not in mixedCase
Parameter BaseSubscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._usdPrice (contracts/BaseSubscription.sol#318) is not in mixedCase
Parameter BaseSubscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._priceFeedAddress (contracts/BaseSubscription.sol#319) is not in mixedCase
Parameter BaseSubscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._planId (contracts/BaseSubscription.sol#333) is not in mixedCase
Parameter BaseSubscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._billingCycle (contracts/BaseSubscription.sol#334) is not in mixedCase
Parameter BaseSubscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._price (contracts/BaseSubscription.sol#335) is not in mixedCase
Parameter BaseSubscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._priceInUsd (contracts/BaseSubscription.sol#336) is not in mixedCase
Parameter BaseSubscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._usdPrice (contracts/BaseSubscription.sol#337) is not in mixedCase
Parameter BaseSubscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._priceFeedAddress (contracts/BaseSubscription.sol#338) is not in mixedCase
Parameter BaseSubscription.updateMerchant(uint256,address)._planId (contracts/BaseSubscription.sol#350) is not in mixedCase
Parameter BaseSubscription.updateMerchant(uint256,address)._newMerchant (contracts/BaseSubscription.sol#350) is not in mixedCase
Parameter BaseSubscription.disablePlan(uint256)._planId (contracts/BaseSubscription.sol#354) is not in mixedCase
Parameter BaseSubscription.subscribe(uint256)._planId (contracts/BaseSubscription.sol#358) is not in mixedCase
Parameter BaseSubscription.subscribeWithPermit(uint256,uint256,uint8,bytes32,bytes32)._planId (contracts/BaseSubscription.sol#363) is not in mixedCase
Parameter BaseSubscription.subscribeWithPermit(uint256,uint256,uint8,bytes32,bytes32)._deadline (contracts/BaseSubscription.sol#364) is not in mixedCase
Parameter BaseSubscription.processPayment(address,uint256)._user (contracts/BaseSubscription.sol#372) is not in mixedCase
Parameter BaseSubscription.processPayment(address,uint256)._planId (contracts/BaseSubscription.sol#372) is not in mixedCase
Parameter BaseSubscription.cancelSubscription(uint256)._planId (contracts/BaseSubscription.sol#376) is not in mixedCase
Parameter Subscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._merchantAddress (contracts/Subscription.sol#51) is not in mixedCase
Parameter Subscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._token (contracts/Subscription.sol#52) is not in mixedCase
Parameter Subscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._price (contracts/Subscription.sol#53) is not in mixedCase
Parameter Subscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._billingCycle (contracts/Subscription.sol#54) is not in mixedCase
Parameter Subscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._priceInUsd (contracts/Subscription.sol#55) is not in mixedCase
Parameter Subscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._usdPrice (contracts/Subscription.sol#56) is not in mixedCase
Parameter Subscription.createPlan(address,address,uint256,uint256,bool,uint256,address)._priceFeedAddress (contracts/Subscription.sol#57) is not in mixedCase
Parameter Subscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._planId (contracts/Subscription.sol#81) is not in mixedCase
Parameter Subscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._billingCycle (contracts/Subscription.sol#82) is not in mixedCase
Parameter Subscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._price (contracts/Subscription.sol#83) is not in mixedCase
Parameter Subscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._priceInUsd (contracts/Subscription.sol#84) is not in mixedCase
Parameter Subscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._usdPrice (contracts/Subscription.sol#85) is not in mixedCase
Parameter Subscription.updatePlan(uint256,uint256,uint256,bool,uint256,address)._priceFeedAddress (contracts/Subscription.sol#86) is not in mixedCase
Parameter Subscription.updateMerchant(uint256,address)._planId (contracts/Subscription.sol#98) is not in mixedCase
Parameter Subscription.updateMerchant(uint256,address)._newMerchant (contracts/Subscription.sol#98) is not in mixedCase
Parameter Subscription.disablePlan(uint256)._planId (contracts/Subscription.sol#102) is not in mixedCase
Parameter Subscription.subscribe(uint256)._planId (contracts/Subscription.sol#118) is not in mixedCase
Parameter Subscription.subscribeWithPermit(uint256,uint256,uint8,bytes32,bytes32)._planId (contracts/Subscription.sol#132) is not in mixedCase
Parameter Subscription.subscribeWithPermit(uint256,uint256,uint8,bytes32,bytes32)._deadline (contracts/Subscription.sol#133) is not in mixedCase
Parameter Subscription.processPayment(address,uint256)._user (contracts/Subscription.sol#148) is not in mixedCase
Parameter Subscription.processPayment(address,uint256)._planId (contracts/Subscription.sol#148) is not in mixedCase
Parameter Subscription.cancelSubscription(uint256)._planId (contracts/Subscription.sol#157) is not in mixedCase
Parameter SubscriptionUpgradeable.createPlan(address,address,uint256,uint256,bool,uint256,address)._merchantAddress (contracts/SubscriptionUpgradeable.sol#51) is not in mixedCase
Parameter SubscriptionUpgradeable.createPlan(address,address,uint256,uint256,bool,uint256,address)._token (contracts/SubscriptionUpgradeable.sol#52) is not in mixedCase
Parameter SubscriptionUpgradeable.createPlan(address,address,uint256,uint256,bool,uint256,address)._price (contracts/SubscriptionUpgradeable.sol#53) is not in mixedCase
Parameter SubscriptionUpgradeable.createPlan(address,address,uint256,uint256,bool,uint256,address)._billingCycle (contracts/SubscriptionUpgradeable.sol#54) is not in mixedCase
Parameter SubscriptionUpgradeable.createPlan(address,address,uint256,uint256,bool,uint256,address)._priceInUsd (contracts/SubscriptionUpgradeable.sol#55) is not in mixedCase
Parameter SubscriptionUpgradeable.createPlan(address,address,uint256,uint256,bool,uint256,address)._usdPrice (contracts/SubscriptionUpgradeable.sol#56) is not in mixedCase
Parameter SubscriptionUpgradeable.createPlan(address,address,uint256,uint256,bool,uint256,address)._priceFeedAddress (contracts/SubscriptionUpgradeable.sol#57) is not in mixedCase
Parameter SubscriptionUpgradeable.updatePlan(uint256,uint256,uint256,bool,uint256,address)._planId (contracts/SubscriptionUpgradeable.sol#71) is not in mixedCase
Parameter SubscriptionUpgradeable.updatePlan(uint256,uint256,uint256,bool,uint256,address)._billingCycle (contracts/SubscriptionUpgradeable.sol#72) is not in mixedCase
Parameter SubscriptionUpgradeable.updatePlan(uint256,uint256,uint256,bool,uint256,address)._price (contracts/SubscriptionUpgradeable.sol#73) is not in mixedCase
Parameter SubscriptionUpgradeable.updatePlan(uint256,uint256,uint256,bool,uint256,address)._priceInUsd (contracts/SubscriptionUpgradeable.sol#74) is not in mixedCase
Parameter SubscriptionUpgradeable.updatePlan(uint256,uint256,uint256,bool,uint256,address)._usdPrice (contracts/SubscriptionUpgradeable.sol#75) is not in mixedCase
Parameter SubscriptionUpgradeable.updatePlan(uint256,uint256,uint256,bool,uint256,address)._priceFeedAddress (contracts/SubscriptionUpgradeable.sol#76) is not in mixedCase
Parameter SubscriptionUpgradeable.updateMerchant(uint256,address)._planId (contracts/SubscriptionUpgradeable.sol#88) is not in mixedCase
Parameter SubscriptionUpgradeable.updateMerchant(uint256,address)._newMerchant (contracts/SubscriptionUpgradeable.sol#88) is not in mixedCase
Parameter SubscriptionUpgradeable.disablePlan(uint256)._planId (contracts/SubscriptionUpgradeable.sol#92) is not in mixedCase
Parameter SubscriptionUpgradeable.subscribe(uint256)._planId (contracts/SubscriptionUpgradeable.sol#97) is not in mixedCase
Parameter SubscriptionUpgradeable.subscribeWithPermit(uint256,uint256,uint8,bytes32,bytes32)._planId (contracts/SubscriptionUpgradeable.sol#102) is not in mixedCase
Parameter SubscriptionUpgradeable.subscribeWithPermit(uint256,uint256,uint8,bytes32,bytes32)._deadline (contracts/SubscriptionUpgradeable.sol#103) is not in mixedCase
Parameter SubscriptionUpgradeable.processPayment(address,uint256)._user (contracts/SubscriptionUpgradeable.sol#111) is not in mixedCase
Parameter SubscriptionUpgradeable.processPayment(address,uint256)._planId (contracts/SubscriptionUpgradeable.sol#111) is not in mixedCase
Parameter SubscriptionUpgradeable.cancelSubscription(uint256)._planId (contracts/SubscriptionUpgradeable.sol#115) is not in mixedCase
Variable SubscriptionUpgradeable.__gap (contracts/SubscriptionUpgradeable.sol#129) is not in mixedCase
Parameter MaliciousToken.setReentrancy(address,bytes)._target (contracts/mocks/MaliciousToken.sol#31) is not in mixedCase
Parameter MaliciousToken.setReentrancy(address,bytes)._data (contracts/mocks/MaliciousToken.sol#31) is not in mixedCase
Parameter MockV3Aggregator.getRoundData(uint80)._roundId (contracts/mocks/MockV3Aggregator.sol#27) is not in mixedCase
Parameter MockV3Aggregator.setLatestAnswer(int256)._newAnswer (contracts/mocks/MockV3Aggregator.sol#58) is not in mixedCase
Parameter MockV3Aggregator.setDecimals(uint8)._newDecimals (contracts/mocks/MockV3Aggregator.sol#63) is not in mixedCase
Variable MockV3Aggregator._decimals (contracts/mocks/MockV3Aggregator.sol#9) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
Redundant expression "roundId (contracts/BaseSubscription.sol#169)" inBaseSubscription (contracts/BaseSubscription.sol#12-383)
Redundant expression "startedAt (contracts/BaseSubscription.sol#170)" inBaseSubscription (contracts/BaseSubscription.sol#12-383)
Redundant expression "answeredInRound (contracts/BaseSubscription.sol#171)" inBaseSubscription (contracts/BaseSubscription.sol#12-383)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#redundant-statements
INFO:Detectors:
ShortStrings.slitherConstructorConstantVariables() (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#40-122) uses literals with too many digits:
	- _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#42)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
EIP712._nameFallback (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#52) should be constant 
EIP712._versionFallback (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#53) should be constant 
ERC20Permit._PERMIT_TYPEHASH_DEPRECATED_SLOT (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#37) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Slither:. analyzed (52 contracts with 100 detectors), 167 result(s) found
