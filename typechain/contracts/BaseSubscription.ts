/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BaseSubscriptionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PAUSER_ROLE"
      | "nextPlanId"
      | "plans"
      | "userSubscriptions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PaymentProcessed"
      | "PlanCreated"
      | "PlanUpdated"
      | "Subscribed"
      | "SubscriptionCancelled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPlanId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "plans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "userSubscriptions",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextPlanId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userSubscriptions",
    data: BytesLike
  ): Result;
}

export namespace PaymentProcessedEvent {
  export type InputTuple = [
    user: AddressLike,
    planId: BigNumberish,
    amount: BigNumberish,
    newNextPaymentDate: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    planId: bigint,
    amount: bigint,
    newNextPaymentDate: bigint
  ];
  export interface OutputObject {
    user: string;
    planId: bigint;
    amount: bigint;
    newNextPaymentDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanCreatedEvent {
  export type InputTuple = [
    planId: BigNumberish,
    merchant: AddressLike,
    token: AddressLike,
    tokenDecimals: BigNumberish,
    price: BigNumberish,
    billingCycle: BigNumberish,
    priceInUsd: boolean,
    usdPrice: BigNumberish,
    priceFeedAddress: AddressLike
  ];
  export type OutputTuple = [
    planId: bigint,
    merchant: string,
    token: string,
    tokenDecimals: bigint,
    price: bigint,
    billingCycle: bigint,
    priceInUsd: boolean,
    usdPrice: bigint,
    priceFeedAddress: string
  ];
  export interface OutputObject {
    planId: bigint;
    merchant: string;
    token: string;
    tokenDecimals: bigint;
    price: bigint;
    billingCycle: bigint;
    priceInUsd: boolean;
    usdPrice: bigint;
    priceFeedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlanUpdatedEvent {
  export type InputTuple = [
    planId: BigNumberish,
    billingCycle: BigNumberish,
    price: BigNumberish,
    priceInUsd: boolean,
    usdPrice: BigNumberish,
    priceFeedAddress: AddressLike
  ];
  export type OutputTuple = [
    planId: bigint,
    billingCycle: bigint,
    price: bigint,
    priceInUsd: boolean,
    usdPrice: bigint,
    priceFeedAddress: string
  ];
  export interface OutputObject {
    planId: bigint;
    billingCycle: bigint;
    price: bigint;
    priceInUsd: boolean;
    usdPrice: bigint;
    priceFeedAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribedEvent {
  export type InputTuple = [
    user: AddressLike,
    planId: BigNumberish,
    nextPaymentDate: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    planId: bigint,
    nextPaymentDate: bigint
  ];
  export interface OutputObject {
    user: string;
    planId: bigint;
    nextPaymentDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCancelledEvent {
  export type InputTuple = [user: AddressLike, planId: BigNumberish];
  export type OutputTuple = [user: string, planId: bigint];
  export interface OutputObject {
    user: string;
    planId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseSubscription extends BaseContract {
  connect(runner?: ContractRunner | null): BaseSubscription;
  waitForDeployment(): Promise<this>;

  interface: BaseSubscriptionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  nextPlanId: TypedContractMethod<[], [bigint], "view">;

  plans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint, string] & {
        merchant: string;
        token: string;
        tokenDecimals: bigint;
        price: bigint;
        billingCycle: bigint;
        priceInUsd: boolean;
        usdPrice: bigint;
        priceFeedAddress: string;
      }
    ],
    "view"
  >;

  userSubscriptions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        subscriber: string;
        planId: bigint;
        startTime: bigint;
        nextPaymentDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextPlanId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "plans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint, string] & {
        merchant: string;
        token: string;
        tokenDecimals: bigint;
        price: bigint;
        billingCycle: bigint;
        priceInUsd: boolean;
        usdPrice: bigint;
        priceFeedAddress: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userSubscriptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        subscriber: string;
        planId: bigint;
        startTime: bigint;
        nextPaymentDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "PaymentProcessed"
  ): TypedContractEvent<
    PaymentProcessedEvent.InputTuple,
    PaymentProcessedEvent.OutputTuple,
    PaymentProcessedEvent.OutputObject
  >;
  getEvent(
    key: "PlanCreated"
  ): TypedContractEvent<
    PlanCreatedEvent.InputTuple,
    PlanCreatedEvent.OutputTuple,
    PlanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PlanUpdated"
  ): TypedContractEvent<
    PlanUpdatedEvent.InputTuple,
    PlanUpdatedEvent.OutputTuple,
    PlanUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Subscribed"
  ): TypedContractEvent<
    SubscribedEvent.InputTuple,
    SubscribedEvent.OutputTuple,
    SubscribedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCancelled"
  ): TypedContractEvent<
    SubscriptionCancelledEvent.InputTuple,
    SubscriptionCancelledEvent.OutputTuple,
    SubscriptionCancelledEvent.OutputObject
  >;

  filters: {
    "PaymentProcessed(address,uint256,uint256,uint256)": TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;
    PaymentProcessed: TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;

    "PlanCreated(uint256,address,address,uint8,uint256,uint256,bool,uint256,address)": TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;
    PlanCreated: TypedContractEvent<
      PlanCreatedEvent.InputTuple,
      PlanCreatedEvent.OutputTuple,
      PlanCreatedEvent.OutputObject
    >;

    "PlanUpdated(uint256,uint256,uint256,bool,uint256,address)": TypedContractEvent<
      PlanUpdatedEvent.InputTuple,
      PlanUpdatedEvent.OutputTuple,
      PlanUpdatedEvent.OutputObject
    >;
    PlanUpdated: TypedContractEvent<
      PlanUpdatedEvent.InputTuple,
      PlanUpdatedEvent.OutputTuple,
      PlanUpdatedEvent.OutputObject
    >;

    "Subscribed(address,uint256,uint256)": TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;
    Subscribed: TypedContractEvent<
      SubscribedEvent.InputTuple,
      SubscribedEvent.OutputTuple,
      SubscribedEvent.OutputObject
    >;

    "SubscriptionCancelled(address,uint256)": TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;
    SubscriptionCancelled: TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;
  };
}
