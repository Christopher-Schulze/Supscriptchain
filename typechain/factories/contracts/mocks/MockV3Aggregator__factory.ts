/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockV3Aggregator,
  MockV3AggregatorInterface,
} from "../../../contracts/mocks/MockV3Aggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "int256",
        name: "initialAnswer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_newDecimals",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_newAnswer",
        type: "int256",
      },
    ],
    name: "setLatestAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610715380380610715833981810160405281019061003291906100de565b81600260006101000a81548160ff021916908360ff16021790555080600081905550426001819055506000600381905550505061011e565b600080fd5b600060ff82169050919050565b6100858161006f565b811461009057600080fd5b50565b6000815190506100a28161007c565b92915050565b6000819050919050565b6100bb816100a8565b81146100c657600080fd5b50565b6000815190506100d8816100b2565b92915050565b600080604083850312156100f5576100f461006a565b5b600061010385828601610093565b9250506020610114858286016100c9565b9150509250929050565b6105e88061012d6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637284e416116100665780637284e416146101375780637a1395aa146101555780638205bf6a146101715780639a6fc8f51461018f578063feaf968c146101c35761009e565b806304ea97b0146100a3578063313ce567146100bf57806332424aa3146100dd57806350d25bcd146100fb57806354fd4d5014610119575b600080fd5b6100bd60048036038101906100b89190610314565b6101e5565b005b6100c76101f6565b6040516100d4919061035d565b60405180910390f35b6100e561020d565b6040516100f2919061035d565b60405180910390f35b610103610220565b6040516101109190610387565b60405180910390f35b610121610226565b60405161012e91906103bb565b60405180910390f35b61013f61022c565b60405161014c9190610466565b60405180910390f35b61016f600480360381019061016a91906104b4565b610269565b005b610179610287565b60405161018691906103bb565b60405180910390f35b6101a960048036038101906101a49190610523565b61028d565b6040516101ba95949392919061055f565b60405180910390f35b6101cb6102b3565b6040516101dc95949392919061055f565b60405180910390f35b806000819055504260018190555050565b6000600260009054906101000a900460ff16905090565b600260009054906101000a900460ff1681565b60005481565b60035481565b60606040518060400160405280601281526020017f4d6f636b2056332041676772656761746f720000000000000000000000000000815250905090565b80600260006101000a81548160ff021916908360ff16021790555050565b60015481565b600080600080600085600054600154600154899450945094509450945091939590929450565b600080600080600060016000546001546001546001945094509450945094509091929394565b600080fd5b6000819050919050565b6102f1816102de565b81146102fc57600080fd5b50565b60008135905061030e816102e8565b92915050565b60006020828403121561032a576103296102d9565b5b6000610338848285016102ff565b91505092915050565b600060ff82169050919050565b61035781610341565b82525050565b6000602082019050610372600083018461034e565b92915050565b610381816102de565b82525050565b600060208201905061039c6000830184610378565b92915050565b6000819050919050565b6103b5816103a2565b82525050565b60006020820190506103d060008301846103ac565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104105780820151818401526020810190506103f5565b60008484015250505050565b6000601f19601f8301169050919050565b6000610438826103d6565b61044281856103e1565b93506104528185602086016103f2565b61045b8161041c565b840191505092915050565b60006020820190508181036000830152610480818461042d565b905092915050565b61049181610341565b811461049c57600080fd5b50565b6000813590506104ae81610488565b92915050565b6000602082840312156104ca576104c96102d9565b5b60006104d88482850161049f565b91505092915050565b600069ffffffffffffffffffff82169050919050565b610500816104e1565b811461050b57600080fd5b50565b60008135905061051d816104f7565b92915050565b600060208284031215610539576105386102d9565b5b60006105478482850161050e565b91505092915050565b610559816104e1565b82525050565b600060a0820190506105746000830188610550565b6105816020830187610378565b61058e60408301866103ac565b61059b60608301856103ac565b6105a86080830184610550565b969550505050505056fea2646970667358221220fba94c8ec3a612852920d3e9389d6e1a73a079f8aa1b9509823f55fae7d8f79a64736f6c634300081a0033";

type MockV3AggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockV3AggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockV3Aggregator__factory extends ContractFactory {
  constructor(...args: MockV3AggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    decimals_: BigNumberish,
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      decimals_,
      initialAnswer,
      overrides || {}
    );
  }
  override deploy(
    decimals_: BigNumberish,
    initialAnswer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(decimals_, initialAnswer, overrides || {}) as Promise<
      MockV3Aggregator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockV3Aggregator__factory {
    return super.connect(runner) as MockV3Aggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockV3AggregatorInterface {
    return new Interface(_abi) as MockV3AggregatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockV3Aggregator {
    return new Contract(address, _abi, runner) as unknown as MockV3Aggregator;
  }
}
